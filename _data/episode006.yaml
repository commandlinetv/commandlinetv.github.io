- time: "00:00:01"
  caption: |
    [Rhythmic, dark electronic intro music]

- time: "00:00:20"
  speaker: League
  index: "recap"
  caption: |
        Welcome back to Command Line TV. 
        In this episode we'll continue our

- time: "00:00:24"
  speaker: League
  caption: |
        look at file management using 'cp', 
        'rm' and the 'mkdir'/'rmdir' commands.

- time: "00:00:31"
  speaker: Lopes
  index: "'cp'" 
  caption: |
        So now that we've finished up on the
        'mv' command, I know that there's also

- time: "00:00:35"
  speaker: Lopes
  caption: |
        the cp command. Is there much 
        difference between those two?

- time: "00:00:38"
  speaker: League
  caption: |
        The main difference is just that 'mv' will 
        take its source files and rename/put them

- time: "00:00:47"
  speaker: League
  caption: |    
        somewhere else. So then the source files 
        dont exist anymore. 'cp' will recreate the

- time: "00:00:53"
  speaker: League
  caption: |
        files by making a copy of the content, 
        so your source files will continue to

- time: "00:00:58"
  speaker: League
  caption: |
        exist when you use 'cp'. Other than that,
        alot of it is the same. So if I look at
        
- time: "00:01:05"
  speaker: League
  index: "'cp' "
  cmd: |
        cp --help|less
  caption: |
        the help for cp, you see the same formats
        here with either source and destination,

- time: "00:01:11"
  speaker: League
  caption: |
        or multiple sources followed by a directory.
        And then alot of the options are the

- time: "00:01:16"
  speaker: League
  caption: |
        same as well. I can do interactive and
        no clobber for the same reasons with

- time: "00:01:21"
  speaker: League
  caption: |
        'cp' and there are a few other things it
        supports that 'mv' does not.

- time: "00:01:26"
  speaker: League
  index: " "
  cmd: |
        
  caption: |
        So lets try out the simplest form of it. 
        I've got a weblog here thats marked as

- time: "00:01:34"
  speaker: League
  caption: |
        being July 11th. If I just want to make 
        a copy of that file in place, I can

- time: "00:01:41"
  speaker: League
  index: " "
  cmd: |
        cp weblog-2015-07-11.txt weblog-2015-07-12.txt
  caption: |
        specify 'cp' and then the filename 
        and then give it a different filename.

- time: "00:01:45"
  speaker: League
  caption: |
        So maybe I just put the next days date 
        there. And now when I did 'mv' this would 
        
- time: "00:01:53"
  speaker: League
  caption: |
        be like a rename but now it's a copy so the 
        original still exists. And if we look at
        
- time: "00:02:00"
  speaker: League
  cmd: |
        ls -l
  caption: |
        the detailed listing they have exactly 
        the same size and they have the same 
        
- time: "00:02:06"
  speaker: League
  cmd: |
        head -3 weblog*
  caption: |
        contents. So if I look at the first 
        couple of lines in both of those files,
        
- time: "00:02:12"
  speaker: League
  caption: |
        they're exactly the same. So it's just 
        making a copy of the data under a

- time: "00:02:17"
  speaker: League
  index: " 'cp' on multiple files "
  caption: |
        different filename. Now another form
        of 'cp' is to copy multiple files into

- time: "00:02:25"
  speaker: League
  caption: |
        a new directory or into an existing 
        directory even. So if I go down into
        
- time: "00:02:29"
  speaker: League
  index: " "
  cmd: |
        cd thinkjava/figs
  caption: |
        my thingjava/figs where I moved all 
        of my fig and eps files into these

- time: "00:02:37"
  speaker: League
  caption: |
        separate subdirectories, I could do 
        that. So right now inside of the fig 
        
- time: "00:02:42"
  speaker: League
  caption: |
        directory I've got a bunch of files 
        called "something"'.fig' and I can

- time: "00:02:46"
  speaker: League
  index: " "
  cmd: |
        cp fig/* .
  caption: |
        do 'cp' from fig/*, so that means all 
        of the files within that fig directory.

- time: "00:02:55"
  speaker: League
  caption: |
        I want to move them to the current directory. 
        The way we specify current directory

- time: "00:03:00"
  speaker: League
  caption: |    
        is just with a single dot, which makes 
        it really easy to miss when you see
        
- time: "00:03:04"
  speaker: League
  caption: |
        this command like, printed on a webpage 
        or something. Alot of times that dot will
        
- time: "00:03:09"
  speaker: League
  caption: |
        dissapear or you'll think it's a speck of 
        dust on your screen or something. But

- time: "00:03:13"
  speaker: League
  caption: |
        that dot is important because it 
        specifies the destination directory.
        
        
- time: "00:03:18"
  speaker: League
  caption: |
        So if I do that now all of those .fig 
        files are in the current directory,
        
- time: "00:03:23"
  speaker: League
  cmd: |
        ls fig
  caption: |
        but they also have copies in fig as well.
        So it keeps both. So that's both formats
        
- time: "00:03:30"
  speaker: League
  index: "'-v' (verbose)"
  caption: |
        of the 'cp' command. One other option 
        that 'cp' and 'mv' both support that

- time: "00:03:38"
  speaker: League
  cmd: |
        cp --help|less
  caption: |
        we havent touched on yet is called 
        verbose. So alot of commands have a '-v'

- time: "00:03:45"
  speaker: League
  caption: |
        option which means verbose. It means it 
        should explain whats going on as it
        
- time: "00:03:50"
  speaker: League
  caption: |
        happens. And this is as opposed to usual,
        like most UNIX commands will be very
        
- time: "00:03:57"
  speaker: League
  caption: |
        quiet and they will only put out a 
        message when there is something seriously
        
- time: "00:04:01"
  speaker: League
  cmd: |
        cp -v eps/*
  caption: |
        wrong. So we can do - lets do the same 
        thing with the eps folder - so 'cp eps/*'
        
- time: "00:04:12"
  speaker: League
  caption: |
        into the current directory. But this 
        time I'm going to use the '-v' option.

- time: "00:04:17"
  speaker: League
  caption: |
        And it will give me a transcript of all
        of the copies that it had to do in order
        
- time: "00:04:22"
  speaker: League
  index: "'cp -r' (recursive) "
  caption: |
        to implement that. So if you want to 
        copy an entire directory worth of files,
        
- time: "00:04:30"
  speaker: League
  caption: |
        the 'cp' command can do that too. Lets 
        say I'm here where I've got this django

- time: "00:04:36"
  speaker: League
  caption: |
        project and I want to make a copy of that
        to start new projects out of it. So if I

- time: "00:04:40"
  speaker: League
  cmd: |
        cp django proj1
  caption: |
        do 'cp django' and then we're going to 
        call it 'proj1', at first it will refuse
        
- time: "00:04:47"
  speaker: League
  caption: |
        to do that - it says "omitting the 
        directory". So there's an option that

- time: "00:04:52"
  speaker: League
  caption: |
        will tell 'cp' it's ok to make copies 
        of entire directories and that's '-r'

- time: "00:04:58"
  speaker: League
  cmd: |
        cp -r django proj1
  caption: |
        for recursive. So 'cp -r django proj1' 
        means now that I've got a proj1 directory

- time: "00:05:08"
  speaker: League
  caption: |
        that has the same contents as the 
        original django directory. And it's fun 
        
- time: "00:05:14"
  speaker: League
  caption: |
        to combine that with the verbose because 
        then you get to see lots and lots of

- time: "00:00:00"
  speaker: League
  cmd: |
        cp -rv django proj2
  caption: |
        files being created. So lets just try 
        it again to create proj2. And you can

- time: "00:05:24"
  speaker: League
  caption: |
        see that even down to the sub-directories,
        like it's making a copy of this 
        
- time: "00:05:29"
  speaker: League
  caption: |
        'django/media/sass.scss' and putting the
        same structure within the 'proj2' directory.
        
- time: "00:05:39"
  speaker: League
  cmd: |
    ls -l django
    ls -l proj2
  caption: |
        And so we can see django compared to proj2.
        
- time: "00:05:46"
  speaker: Lopes
  index: "'cp -a' option"
  caption: |
        I guess a good thing to point out is that 
        its also copying the date as well
        
- time: "00:05:52"
  speaker: Lopes
  caption: |
        - the date and time as well. 

- time: "00:05:53"
  speaker: League
  caption: |
        yeah, this date and time, it's - like, 
        the originals were June 1st and then the

- time: "00:06:00"
  speaker: League
  caption: |
        copy actually gets a new time stamp. 
        So it's not preseving the timestamps

- time: "00:06:04"
  speaker: League       
  caption: |
        currently. There is a way for it to do 
        that, which is the '-a' option. If we

- time: "00:06:10"
  speaker: League
  cmd: |
        cp --help|less
  caption: |
        go back to the help screen, '-a' stands 
        for archive and that means it preserves

- time: "00:06:17"
  speaker: League
  caption: |
        all sorts of information. One of them is 
        timestamps but it can also be permissions

- time: "00:06:22"
  speaker: League
  caption: |
        and some other stuff. So if I repeat that
        last 'cp' command, instead of '-rv' I can
        
- time: "00:06:30"
  speaker: League
  cmd: |
        cp -av django proj3
  caption: |
        type '-av' and the 'a' for archive 
        includes doing recursive so you can keep
        
- time: "00:06:38"
  speaker: League
  caption: |
        the 'r' if you want to but it is not 
        needed anymore because 'a' implies '-r'.
        
- time: "00:06:45"
  speaker: League
  caption: |
        So I make a copy of django into 'proj3'
        and now if I compare django to proj3 we

- time: "00:06:52"
  speaker: League
  caption: |
        see that the timestamps 
        get preserved as well.
        
- time: "00:06:57"
  speaker: Lopes
  index: " 'mkdir' "
  caption: |
        So professor, earlier in this episode we
        actually made a directory to do some

- time: "00:07:01"
  speaker: League
  caption: |
        work in it. Can we go more in depth as
        to what the capabilities are of that? 

- time: "00:07:06"
  speaker: League
  caption: |
        Yeah, so 'mkdir' offers - basically it's 
        one of the very simple commands - you

- time: "00:07:12"
  speaker: League
  index: " "
  cmd: |
        
  caption: |
        just type 'mkdir' and then the directory 
        name or multiple directory names. But

- time: "00:07:17"
  speaker: League
  index: "'mkdir -p'"
  caption: |
        there is one cool thing that it supports
        that's very useful which is, imagine

- time: "00:07:21"
  speaker: League
  caption: |
        that you want to create a tree structure 
        of a directory like, down a couple of

- time: "00:07:28"
  speaker: League
  caption: |
        levels. So instead of just creating a 
        single directory I might want to, lets

- time: "00:07:35"
  speaker: League
  cmd: |
        mkdir proj4/assets/js
  caption: |
        say, create 'proj4/assets/js' because 
        that's where I want to put my javascript
        
- time: "00:07:46"
  speaker: League
  caption: |
        files for my web project or something. 
        The trouble with this is that 'mkdir'

- time: "00:07:52"
  speaker: League
  caption: |
        will refuse to create that if the proj4
        itself doesn't exist, right. So this

- time: "00:08:00"
  speaker: League
  caption: |
        would mean I want proj4 as a directory,
        within that I want assets as a directory,
        
- time: "00:08:05"
  speaker: League
  caption: |
        within that I want js as a directory. 
        That's three separate directories that

- time: "00:08:09"
  speaker: League
  caption: |
        it's supposed to create and it will not
        do that. So one solution is to do it one
        
- time: "00:08:14"
  speaker: League
  caption: |
        at a time. I could say 'mkdir proj4' 
        press enter, and then once that exists

- time: "00:08:20"
  speaker: League       
  caption: |
        I can do 'mkdir proj4/assets' press enter,
        and so on. But the cooler way is 'mkdir'

- time: "00:08:27"
  speaker: League
  caption: |
        supports an option '-p'. This just means
        to create all of the parent directories
        
- time: "00:00:00"
  speaker: League
  cmd: |
        mkdir -p proj4/assets/js
  caption: |
        necessary to create what I said and so 
        just 'mkdir -p' and now within proj4 -
        
- time: "00:08:44"
  speaker: League
  caption: |
        let's see the top level first. Within 
        proj4 I've got assets, within that I've
        
- time: "00:08:50"
  speaker: League
  caption: |
        got js, and that is then empty but it 
        created the entire tree.

- time: "00:08:55"
  speaker: Lopes
  index: "'tree' "
  caption: |
        And if we did the 'tree' command it would 
        show the entire structure as well correct?
        
- time: "00:08:59"
  speaker: League
  cmd: |
        tree proj4
  caption: |
        Yeah, I don't know if we used tree 
        before, it's a great command though.

- time: "00:09:02"
  speaker: League
  caption: |
        So tree is kind of a way to visualize 
        a directory tree using these kind of

- time: "00:09:08"
  speaker: League
  caption: |
        line drawing characters. It doesnt 
        exist on every UNIX system and you might
        
- time: "00:09:12"
  speaker: League
  cmd: |
        tree django
  caption: |
        have to install it but it's something 
        definetely worth having. So it looks 

- time: "00:09:18"
  speaker: League
  cmd: |
        tree proj4
  caption: |
        like that. Yeah, so we can see that that
        tree structure that we created using

- time: "00:00:00"
  speaker: League
  index: "'rmdir'"
  caption: |
        'mkdir -p'. Now for removing directories
        there's a command 'rmdir'. So if I decide
        
- time: "00:09:34"
  speaker: League
  cmd: |
        rmdir proj4/assets/js
  caption: |
        I don't want that js folder, I could say
        'rmdir proj4/assets/js' and it would

- time: "00:09:42"
  speaker: League
  caption: |
        remove that one folder from assets. The 
        parent directories still exist, it only
        
- time: "00:09:48"
  speaker: League
  caption: |
        removed the bottom most one that I 
        specified. What if I want to remove

- time: "00:09:53"
  speaker: League
  index: "'rm'"
  cmd: |
        rmdir proj4
  caption: |
        the whole proj4 directory? So if I tried
        'rmdir proj4' it will actually complain -

- time: "00:10:01"
  speaker: League
  caption: |
        this is unusual, most UNIX commands will
        just do something awful without complaining.
        
- time: "00:10:07"
  speaker: League
  caption: |
        But this one actually will prevent you from
        removing a directory unless it's

- time: "00:10:12"
  speaker: League
  caption: |
        completely empty - it cannot have any 
        subdirectores or any files in it, even

- time: "00:10:17"
  speaker: League
  caption: |
        the hidden dot files. So, that doesn't
        work and I would have to do them one at

- time: "00:10:26"
  speaker: League
  index: " "
  cmd: |
        rmdir proj4/assets, rmdir proj4
  caption: |
        a time, like, 'rmdir proj4/assets' and 
        then 'rmdir proj4'. And 'rmdir' doesn't

- time: "00:10:34"
  speaker: League
  caption: |
        have an option that lets you shortcut that.
        However, there's another command which

- time: "00:10:42"
  speaker: League
  caption: |
        is just 'rm'. So 'rm' has a deserved 
        reputation of being very sharp tooled.

- time: "00:10:53"
  speaker: League
  caption: |
        It will delete lots and lots of stuff 
        very quickly and if you misstype a

- time: "00:10:57"
  speaker: League       
  caption: |
        command a little bit you can really make
        things difficult on yourself. So by 
        
- time: "00:11:04"
  speaker: League
  caption: |
        default 'rm' will just delete files, so
        lets take a look here. I've got these

- time: "00:11:09"
  speaker: League
  cmd: |
        rm weblog*
  caption: |
        weblog files. Lets say I want to 
        'rm weblog*' right and press enter. Very quick
        
- time: "00:11:22"
  speaker: League
  caption: |
        and quiet, but those two files are gone.
        So that's 'rm'. Now if you want to remove
        
- time: "00:11:31"
  speaker: League
  cmd: |
        rm proj2
  caption: |
        a directory, 'rm' for example 'proj2', 
        that doesn't work because it's a

- time: "00:11:41"
  speaker: League
  caption: |
        directory and 'rm' by default only 
        removes files. But it doesnt take much 

- time: "00:11:45"
  speaker: League
  caption: |
        to convince 'rm' to do more destructive
        things. So the one option we'll learn is
        
- time: "00:11:52"
  speaker: League
  index: "'rm -r' (recursive) "
  cmd: |
        rm -r proj2
  caption: |
        '-r' which is of course is for recursive.
        And this means it will go into that

- time: "00:11:58"
  speaker: League
  caption: |
        directory, delete all of the files, any
        subdirectories and their files and so on.
        
- time: "00:12:05"
  speaker: League
  caption: |
        The entire tree, it will just blow away.
        And again it's very fast and now all of

- time: "00:12:11"
  speaker: League
  caption: |
        those files are gone. So is there a way 
        we can protect ourselves from 'rm -r'?
        
- time: "00:12:16"
  speaker: Lopes
  index: "'alias' on rm"
  caption: |
        Set up another alias on it.

- time: "00:12:17"
  speaker: League
  cmd: |
        rm --help|less
  caption: |
        Yeah, exactly. So 'rm' - let's take a 
        look at the help first. It supports the
        
- time: "00:12:24"
  speaker: League
  caption: |
        interactive just like 'mv' and 'cp' did
        which means before every removal it will
        
- time: "00:12:29"
  speaker: League
  caption: |
        prompt. Maybe you don't want that but I
        think it's not a bad idea to have an

- time: "00:12:35"
  speaker: League
  caption: |
        alias for that. So lets try that. 
        Where did I keep my alias' before?

- time: "00:12:42"
  speaker: Lopes
  index: "~/.bashrc "
  cmd: |
        nano ~/.bashrc
  caption: |
        It was '.bash s h'? Oh, 'r c'.
        
- time: "00:12:45"
  speaker: League
  caption: |
        'bash rc', yep.
        
        
- time: "00:12:48"
  speaker: League
  cmd: |
        alias rm='rm -i'
  caption: |
        So I'm going to go in there and lets 
        add an alias for "rm='rm -i'". And I'll
        
- time: "00:12:59"
  speaker: League
  caption: |
        put a little comment above this, ok. 
        So now I've got an alias for 'rm' that

- time: "00:13:05"
  speaker: League
  caption: |
        doesn't take effect immediately, I 
        would have to close the terminal and

- time: "00:13:09"
  speaker: League
  cmd: |
        source ~/.bashrc
  caption: |
        reopen another one, or source that file.
        Now it's there as an alias. And so now

- time: "00:13:20"
  speaker: League
  cmd: |
        rm -r proj1
  caption: |
        if I do 'rm -r proj1' it will slow me 
        down quite alot. First of all, 
        
- time: "00:13:27"
  speaker: League
  caption: |
        "Do you want to descend into this directory"
        in the first place? Yes.

- time: "00:13:32"
  speaker: League
  caption: |
        "Do you want to descend into templates?" 
        Yes. "Do you want to remove this file

- time: "00:13:37"
  speaker: League
  caption: |
        which is empty?" ok. So this obviously 
        slows you down if you type something by

- time: "00:13:46"
  speaker: League
  index: "backslash"
  caption: |
        accident. But if you really seriously 
        want to remove a bunch of stuff, one

- time: "00:13:51"
  speaker: League
  cmd: |
        ctrl+c
  caption: |
        way to get around an alias is - by the 
        way to stop that I just hit 'ctrl c' to

- time: "00:13:58"
  speaker: League
  caption: |
        cancel that command. 'ctrl c' wouldn't 
        undo any deletes that have already happened,
        
- time: "00:14:03"
  speaker: League
  caption: |
        it just cancels it where it is in the 
        process. So if I want to actually delete
        
- time: "00:14:10"
  speaker: League
  cmd: |
        \rm -r proj1
  caption: |
        that whole directory, one way to bypass 
        an alias is to put a backslash before

- time: "00:14:18"
  speaker: League
  caption: |
        the command. And now if I've got an 'rm' 
        as an alias, this will skip the alias and
        
- time: "00:14:25"
  speaker: League
  caption: |
        just go to the regular command. So that 
        will now delete all of the 'proj1'

- time: "00:14:30"
  speaker: League
  caption: |
        directory very fast. So it's a little 
        bit of a trade off, right? If 'rm'
        
- time: "00:14:37"
  speaker: League
  caption: |
        with interactive is asking too many 
        questions, then what you're going to do
        
- time: "00:14:42"
  speaker: League
  caption: |
        when you really need to delete something
        is just type '\rm'. And actually I've

- time: "00:14:47"
  speaker: League
  caption: |
        acquired that habbit personally, my own
        '.bashrc' has 'rm' aliased to 'rm -i'

- time: "00:14:45"
  speaker: League
  caption: |
        but I always, I never just type 'rm'. 
        It's just in my bones now, or in my

- time: "00:15:01"
  speaker: League
  caption: |    
        fingers to type '\rm' whenever I want 
        to delete something, so the alias doesn't

- time: "00:15:06"
  speaker: League
  caption: |    
        really do me any good. One of the other
        options of 'rm' that can be especially

- time: "00:15:09"
  speaker: League
  index: "'rm -f' (force)"
  cmd: |
        rm --help|less
  caption: |    
        dangerous is the '-f'. So we see here 
        '-f' means force. So force basically

- time: "00:15:21"
  speaker: League
  caption: |    
        means if there is something preventing
        deletion that can be resolved - so for

- time: "00:15:27"
  speaker: League
  caption: |    
        example, if I've set up a permission on
        a file so that I'm not allowed to write

- time: "00:15:32"
  speaker: League
  caption: |    
        to it, to delete it - it can try to 
        actually modify the permissions in order
        
- time: "00:15:39"
  speaker: League
  caption: |
        to allow that again. And so if I'm 
        allowed to change the permission to

- time: "00:15:44"
  speaker: League
  caption: |
        allow me to delete it then it will still
        delete it. So that's a pretty serious

- time: "00:15:50"
  speaker: League
  index: "DANGER: 'rm -rf'"
  caption: |    
        thing. So when you combine recursive 
        with forcing that really becomes quite
        
- time: "00:15:54"
  speaker: League
  cmd: |
        rm -rf
  caption: |
        dangerous and so 'rm -rf' even in like,
        nerd culture is known to be like a

- time: "00:16:00"
  speaker: League
  caption: |
        very dangerous thing to do, and it 
        actually gives me chills a little bit

- time: "00:16:03"
  speaker: League
  caption: |    
        even to type it. And one thing you 
        never ever want to do probably is -

- time: "00:16:10"
  speaker: League
  caption: |    
        I can't even type this - I've got to 
        separate the 'rm' so it doesn't cause

- time: "00:16:15"
  speaker: League
  caption: |    
        me real problems - is if you put a slash
        here, slash is a way to refer to the top
        
- time: "00:16:21"
  speaker: League
  caption: |
        level of your file system, 
        the root directory. And so this means

- time: "00:16:26"
  speaker: League
  caption: |    
        start at the top of my entire disk or
        even multiple disks and try to delete
        
- time: "00:16:33"
  speaker: League
  caption: |
        everything it can. So that's a pretty 
        awful command and you should probably

- time: "00:16:39"
  speaker: League
  caption: |    
        try never to type it.

- time: "00:16:41"
  speaker: Lopes
  index: "closing"
  caption: |
        Alright so today we covered alot of file
        management using the copy, the remove, 
        
- time: "00:16:46"
  speaker: Lopes
  caption: |
        the move, as well as the make and 
        remove directories.

- time: "00:16:49"
  speaker: League
  caption: |
        So next time I think we're going to look
        at 'image magic' which is a pretty

- time: "00:16:54"
  speaker: League
  caption: |    
        exciting suite of command line tools
        for doing image processing.

- time: "00:16:59"
  speaker: League
  caption: |    
        You can do things like convert images 
        from one format to another.

- time: "00:17:03"
  speaker: League
  caption: |    
        You can automate things like applying 
        filters to images, shrinking and cropping
        
- time: "00:17:09"
  speaker: League
  caption: |
        them - all sorts of things. So I think 
        thats going to be a pretty exciting one
        
- time: "00:17:13"
  speaker: League
  caption: |
        because we're going to move beyond just
        the simple commands that do things you

- time: "00:17:17"
  speaker: League
  caption: |    
        already know how to do on a maybe 
        desktop file manager. And we're going

- time: "00:17:22"
  speaker: League
  caption: |    
        to start to see some things that we can
        do on the command line that

- time: "00:17:25"
  speaker: League
  caption: |    
        are pretty different. 
        
- time: "00:17:28"
  speaker: League
  caption: |
        So see you then!        