- time: "00:00:01"
  caption: |
    [Rhythmic, dark electronic intro music]

- time: "00:00:20"
  speaker: League
  caption: |
    Welcome back to Command Line TV. In this
    episode we'll continue our look at

- time: "00:00:24"
  speaker: League
  caption: |
    file management using `cp`, `rm` and
    the `mkdir`/`rmdir` commands.

- time: "00:00:31"
  speaker: Lopes
  index: "`cp` (copy files and dirs)"
  caption: |
    So now that we've finished up on the `mv` command,
    I know that there's also the `cp` command.

- time: "00:00:36"
  speaker: Lopes
  caption: |
    Is there much difference between those two?

- time: "00:00:38"
  speaker: League
  caption: |
    The main difference is just that `mv` will
    take its source files and rename

- time: "00:00:46"
  speaker: League
  caption: |
    them or put them somewhere else, so then the
    source files don't exist anymore.

- time: "00:00:51"
  speaker: League
  caption: |
    `cp` will recreate the files by
    making a copy of the content,

- time: "00:00:56"
  speaker: League
  caption: |
    so your source files will continue
    to exist when you use `cp`.

- time: "00:01:00"
  speaker: League
  cmd: |
    cp --help | less
  caption: |
    Other than that, a lot of it is the same.
    So if I look at the help for `cp`,

- time: "00:01:07"
  speaker: League
  caption: |
    you see the same formats here with
    either source and destination,

- time: "00:01:11"
  speaker: League
  caption: |
    or multiple sources followed by a directory. And then
    a lot of the options are the same as well.

- time: "00:01:17"
  speaker: League
  caption: |
    I can do interactive and no-clobber for
    the same reasons with `cp` and

- time: "00:01:23"
  speaker: League
  caption: |
    there are a few other things it
    supports that `mv` does not.

- time: "00:01:26"
  speaker: League
  caption: |
    So let's try out the simplest form of it. I've got a
    web log here that's marked as being July 11th.

- time: "00:01:35"
  speaker: League
  caption: |
    If I just want to make a copy of that file in place,

- time: "00:01:40"
  speaker: League
  cmd: |
    cp weblog-2015-07-11.txt weblog-2015-07-12.txt
  caption: |
    I can specify `cp` and then the filename and
    then give it a different filename.

- time: "00:01:45"
  speaker: League
  caption: |
    So maybe I just put the next day's date
    there. And now when I did `mv` this

- time: "00:01:52"
  speaker: League
  caption: |
    would be like a rename but now it's a
    copy so the original still exists.

- time: "00:01:59"
  speaker: League
  cmd: |
    ls -l
  caption: |
    And if we look at the detailed listing
    they have exactly the same size and

- time: "00:02:05"
  speaker: League
  cmd: |
    head -3 weblog*
  caption: |
    they have the same contents. So if I look at the
    first couple of lines in both of those files,

- time: "00:02:12"
  speaker: League
  caption: |
    they're exactly the same. So it's just making a
    copy of the data under a different filename.

- time: "00:02:19"
  speaker: League
  caption: |
    Now another form of `cp` is to copy
    multiple files into a new directory or

- time: "00:02:26"
  speaker: League
  cmd: |
    cd thinkjava/figs
  caption: |
    into an existing directory even. So if I
    go down into my `thinkjava/figs`

- time: "00:02:31"
  speaker: League
  caption: |
    where I moved all of my `.fig` and `.eps` files into
    these separate subdirectories, I could do that.

- time: "00:02:40"
  speaker: League
  cmd: |
    ls fig
  caption: |
    So right now inside of the `fig` directory
    I've got a bunch of files called

- time: "00:02:44"
  speaker: League
  caption: |
    "something" `.fig` and I can do `cp` from
    `fig/*`, so that means all of the

- time: "00:02:52"
  speaker: League
  cmd: |
    cp fig/* .
  caption: |
    files within that `fig` directory. I want to
    move them to the current directory.

- time: "00:02:58"
  speaker: League
  index: "`.` (current dir)"
  caption: |
    The way we specify current directory
    is just with a single dot,

- time: "00:03:02"
  speaker: League
  caption: |
    which makes it really easy to miss
    when you see this command like,

- time: "00:03:06"
  speaker: League
  caption: |
    printed on a web page or something. A lot
    of times that dot will disappear

- time: "00:03:09"
  speaker: League
  caption: |
    or you'll think it's a speck of dust
    on your screen or something.

- time: "00:03:13"
  speaker: League
  caption: |
    But that dot is important because it
    specifies the destination directory.

- time: "00:03:18"
  speaker: League
  caption: |
    So if I do that -- now all of those `.fig`
    files are in the current directory,

- time: "00:03:23"
  speaker: League
  caption: |
    but they also have copies in `fig`
    as well. So it keeps both.

- time: "00:03:29"
  speaker: League
  caption: |
    So that's both formats of the `cp` command.

- time: "00:03:33"
  speaker: League
  index: "`cp -v` (verbose)"
  caption: |
    One other option that `cp` and `mv` both support that
    we haven't touched on yet is called *verbose*.

- time: "00:03:41"
  speaker: League
  caption: |
    So a lot of commands have a `-v`
    option which means verbose.

- time: "00:03:47"
  speaker: League
  caption: |
    It means it should explain what's
    going on as it happens.

- time: "00:03:52"
  speaker: League
  caption: |
    And this is as opposed to usual -- like
    most Unix commands will be very

- time: "00:03:57"
  speaker: League
  caption: |
    quiet and they will only put out a message
    when there is something seriously wrong.

- time: "00:04:02"
  speaker: League
  caption: |
    So we can do -- let's do the same
    thing with the `eps` folder --

- time: "00:04:06"
  speaker: League
  cmd: |
    cp -v eps/* .
  caption: |
    so `cp eps/*` into the current directory. But
    this time I'm going to use the `-v` option.

- time: "00:04:17"
  speaker: League
  caption: |
    And it will give me a transcript of all of the copies
    that it had to do in order to implement that.

- time: "00:04:25"
  speaker: League
  index: "`cp -r` (recursive)"
  caption: |
    So if you want to copy an entire directory worth of
    files, the `cp` command can do that too.

- time: "00:04:32"
  speaker: League
  caption: |
    Let's say I'm here where I've got this
    django project and I want to make a

- time: "00:04:38"
  speaker: League
  caption: |
    copy of that to start new projects out of
    it. So if I do `cp django` and

- time: "00:04:42"
  speaker: League
  cmd: |
    cp django proj1
  caption: |
    then we're going to call it `proj1` -- at
    first it will refuse to do that --

- time: "00:04:48"
  speaker: League
  caption: |
    it says "omitting the directory". So
    there's an option that will tell `cp`

- time: "00:04:53"
  speaker: League
  cmd: |
    cp -r django proj1
  caption: |
    it's okay to make copies of entire
    directories and that's `-r` for *recursive*.

- time: "00:05:01"
  speaker: League
  caption: |
    So `cp -r django proj1` means now that
    I've got a `proj1` directory that

- time: "00:05:08"
  speaker: League
  cmd: |
    ls django
    ls proj1
  caption: |
    has the same contents as the
    original `django` directory.

- time: "00:05:13"
  speaker: League
  caption: |
    And it's fun to combine that with the
    verbose because then you get to see

- time: "00:05:17"
  speaker: League
  cmd: |
    cp -rv django proj2
  caption: |
    lots and lots of files being created. So let's
    just try it again to create `proj2`.

- time: "00:05:23"
  speaker: League
  caption: |
    And you can see that even down to
    the sub-directories --

- time: "00:05:27"
  speaker: League
  caption: |
    like it's making a copy of this
    `django/media/sass.scss` and putting the

- time: "00:05:34"
  speaker: League
  cmd: |
    ls -l django
    ls -l proj2
  caption: |
    same structure within the `proj2` directory. And so
    we can see `django` compared to `proj2`.

- time: "00:05:46"
  speaker: Lopes
  caption: |
    I guess a good thing to point out is that
    its also copying the date as well --

- time: "00:05:50"
  speaker: Lopes
  caption: |
    the date and time as well.

- time: "00:05:53"
  speaker: League
  index: "`cp -a` (archive)"
  caption: |
    Yeah, this date and time, it's -- like,
    the originals were June 1st and

- time: "00:05:59"
  speaker: League
  caption: |
    then the copy actually gets a *new* timestamp. So
    it's *not* preserving the timestamps currently.

- time: "00:06:05"
  speaker: League
  caption: |
    There is a way for it to do that,
    which is the `-a` option.

- time: "00:06:10"
  speaker: League
  caption: |
    If we go back to the help screen, `-a`
    stands for *archive* and that means

- time: "00:06:17"
  speaker: League
  caption: |
    it preserves all sorts of information. One
    of them is timestamps but it can

- time: "00:06:21"
  speaker: League
  caption: |
    also be permissions and some other stuff. So
    if I repeat that last `cp` command,

- time: "00:06:28"
  speaker: League
  cmd: |
    cp -av django proj3
  caption: |
    instead of `-rv` I can type `-av` and the `a`
    for archive includes doing recursive --

- time: "00:06:36"
  speaker: League
  caption: |
    so you can keep the `-r` if you want to but it is
    not needed anymore because `-a` implies `-r`.

- time: "00:06:45"
  speaker: League
  caption: |
    So I make a copy of django into `proj3`
    and now if I compare `django` to

- time: "00:06:51"
  speaker: League
  cmd: |
    ls -l django
    ls -l proj3
  caption: |
    `proj3` we see that the
    timestamps get preserved as well.

- time: "00:06:56"
  speaker: Lopes
  caption: |
    So professor, earlier in this episode we actually
    made a directory to do some work in it.

- time: "00:07:01"
  speaker: Lopes
  caption: |
    Can we go more in depth as to what
    the capabilities are of that?

- time: "00:07:05"
  speaker: League
  index: "`mkdir` (make dirs)"
  caption: |
    Yeah, so `mkdir` offers -- basically it's
    one of the very simple commands --

- time: "00:07:12"
  speaker: League
  caption: |
    you just type `mkdir` and then the directory
    name or multiple directory names.

- time: "00:07:16"
  speaker: League
  index: "`mkdir -p` (parents)"
  caption: |
    But there is one cool thing that it
    supports that's very useful -- which is,

- time: "00:07:21"
  speaker: League
  caption: |
    imagine that you want to create a tree structure of
    a directory like, down a couple of levels.

- time: "00:07:29"
  speaker: League
  caption: |
    So instead of just creating a single
    directory I might want to -- let's say,

- time: "00:07:35"
  speaker: League
  cmd: |
    mkdir proj4/assets/js
  caption: |
    create `proj4/assets/js` because that's
    where I want to put my javascript

- time: "00:07:46"
  speaker: League
  caption: |
    files for my web project or something.
    The trouble with this is that

- time: "00:07:51"
  speaker: League
  caption: |
    `mkdir` will refuse to create that if the
    `proj4` itself doesn't exist, right.

- time: "00:07:59"
  speaker: League
  caption: |
    So this would mean I want `proj4` as a directory,
    within that I want `assets` as a directory,

- time: "00:08:05"
  speaker: League
  caption: |
    within that I want `js` as a directory.
    That's three separate directories

- time: "00:08:09"
  speaker: League
  caption: |
    that it's supposed to create and it will not do that.
    So one solution is to do it one at a time.

- time: "00:08:15"
  speaker: League
  cmd: |
    mkdir proj4
    mkdir proj4/assets
  caption: |
    I could say `mkdir proj4` press enter, and
    then once that exists I can do

- time: "00:08:21"
  speaker: League
  caption: |
    `mkdir proj4/assets` press enter, and so on. But the
    cooler way is `mkdir` supports an option `-p`.

- time: "00:08:31"
  speaker: League
  caption: |
    This just means to create all of the
    *parent* directories necessary to

- time: "00:08:36"
  speaker: League
  cmd: |
    mkdir -p proj4/assets/js
  caption: |
    create what I said and so just `mkdir
    -p` and now within `proj4` --

- time: "00:08:44"
  speaker: League
  caption: |
    let's see the top level first --
    within `proj4` I've got `assets`,

- time: "00:08:49"
  speaker: League
  cmd: |
    ls proj4
    ls proj4/assets
  caption: |
    within that I've got `js`, and that is then
    empty but it created the entire tree.

- time: "00:08:55"
  speaker: Lopes
  index: "`tree` (list dirs in tree-like form)"
  caption: |
    And if we did the `tree` command it would show
    the entire structure as well correct?

- time: "00:08:59"
  speaker: League
  cmd: |
    tree proj4
  caption: |
    Yeah, I don't know if we used `tree`
    before, it's a great command though.

- time: "00:09:02"
  speaker: League
  caption: |
    So `tree` is kind of a way to visualize a
    directory tree using these kind

- time: "00:09:08"
  speaker: League
  caption: |
    of line drawing characters. It doesn't
    exist on every Unix system and you might

- time: "00:09:12"
  speaker: League
  cmd: |
    tree django
  caption: |
    have to install it but it's something
    definitely worth having. So it looks like that.

- time: "00:09:20"
  speaker: League
  caption: |
    Yeah, so we can see that that tree structure
    that we created using `mkdir -p`.

- time: "00:09:27"
  speaker: League
  index: "`rmdir` (remove empty dirs)"
  caption: |
    Now for removing directories
    there's a command `rmdir`.

- time: "00:09:33"
  speaker: League
  caption: |
    So if I decide I don't want that `js`
    folder, I could say `rmdir`

- time: "00:09:38"
  speaker: League
  cmd: |
    rmdir proj4/assets/js
  caption: |
    `proj4/assets/js` and it would remove
    that one folder from `assets`.

- time: "00:09:45"
  speaker: League
  cmd: |
    tree proj4
  caption: |
    The parent directories still exist, it only
    removed the bottom-most one that I specified.

- time: "00:09:52"
  speaker: League
  caption: |
    What if I want to remove the whole `proj4` directory?

- time: "00:09:55"
  speaker: League
  cmd: |
    rmdir proj4
  caption: |
    So if I tried `rmdir proj4` it will
    actually complain because --

- time: "00:10:01"
  speaker: League
  caption: |
    this is unusual, most Unix commands will just
    do something awful without complaining!

- time: "00:10:07"
  speaker: League
  caption: |
    But this one actually will prevent you from removing
    a directory unless it's completely empty --

- time: "00:10:14"
  speaker: League
  caption: |
    it cannot have any subdirectories or any
    files in it, even the hidden dot files.

- time: "00:10:20"
  speaker: League
  caption: |
    So, that doesn't work and I would have
    to do them one at a time, like,

- time: "00:10:27"
  speaker: League
  cmd: |
    rmdir proj4/assets
    rmdir proj4
  caption: |
    `rmdir proj4/assets` and then `rmdir
    proj4`. And `rmdir` doesn't have an

- time: "00:10:35"
  speaker: League
  index: "`rm` (remove files or dirs)"
  caption: |
    option that lets you shortcut that. However,
    there's another command which is just `rm`.

- time: "00:10:43"
  speaker: League
  caption: |
    So `rm` has a deserved reputation
    of being a very sharp tool.

- time: "00:10:53"
  speaker: League
  caption: |
    It will delete lots and lots of stuff
    very quickly and if you mistype a

- time: "00:10:57"
  speaker: League
  caption: |
    command a little bit you can really make
    things difficult on yourself.

- time: "00:11:03"
  speaker: League
  caption: |
    So by default `rm` will just delete files, so let's
    take a look here. I've got these weblog files.

- time: "00:11:11"
  speaker: League
  cmd: |
    rm weblog*
  caption: |
    Let's say I want to `rm weblog*`,
    right -- and press enter.

- time: "00:11:21"
  speaker: League
  caption: |
    Very quick and quiet, but those two
    files are gone. So that's `rm`.

- time: "00:11:29"
  speaker: League
  cmd: |
    rm proj2
  caption: |
    Now if you want to remove a directory,
    `rm` -- for example `proj2` --

- time: "00:11:38"
  speaker: League
  caption: |
    that doesn't work because it's a directory and
    `rm` by default only removes files.

- time: "00:11:44"
  speaker: League
  caption: |
    But it doesn't take much to convince `rm`
    to do more destructive things.

- time: "00:11:49"
  speaker: League
  index: "`rm -r` (recursive)"
  cmd: |
    rm -r proj2
  caption: |
    So the one option we'll learn is `-r`
    which is of course is for recursive.

- time: "00:11:57"
  speaker: League
  caption: |
    And this means it will go into that
    directory, delete all of the files,

- time: "00:12:02"
  speaker: League
  caption: |
    any subdirectories, and their files, and so on.
    The entire tree, it will just blow away.

- time: "00:12:08"
  speaker: League
  caption: |
    And again it's very fast and now
    all of those files are gone.

- time: "00:12:13"
  speaker: League
  caption: |
    So is there a way we can protect
    ourselves from `rm -r`?

- time: "00:12:16"
  speaker: Lopes
  caption: |
    Set up another alias on it.

- time: "00:12:18"
  speaker: League
  index: "`rm -i` (interactive)"
  cmd: |
    rm --help|less
  caption: |
    Yeah, exactly. So `rm` -- let's take
    a look at the help first.

- time: "00:12:22"
  speaker: League
  caption: |
    It supports the 'interactive' just
    like `mv` and `cp` did --

- time: "00:12:27"
  speaker: League
  caption: |
    which means before every removal it will
    prompt. Maybe you don't want that

- time: "00:12:32"
  speaker: League
  caption: |
    but I think it's not a bad idea to have an
    alias for that. So let's try that.

- time: "00:12:38"
  speaker: League
  caption: |
    Where did I keep my aliases before?

- time: "00:12:41"
  speaker: Lopes
  caption: |
    It was `.bash s h`? Oh, `rc`.

- time: "00:12:46"
  speaker: League
  index: "`.bashrc`"
  cmd: |
    nano ~/.bashrc
    alias rm='rm -i'
  caption: |
    `.bashrc`, yep. So I'm going to go in there and
    let's add an alias for `rm='rm -i'`.

- time: "00:12:58"
  speaker: League
  caption: |
    And I'll put a little comment
    above this [laughs] okay.

- time: "00:13:03"
  speaker: League
  caption: |
    So now I've got an alias for `rm` that
    doesn't take effect immediately,

- time: "00:13:07"
  speaker: League
  cmd: |
    source ~/.bashrc
  caption: |
    I would have to close the terminal and reopen
    another one, or `source` that file.

- time: "00:13:14"
  speaker: League
  cmd: |
    rm -r proj1
  caption: |
    Now it's there as an alias. And so now if I do `rm
    -r proj1` it will slow me down quite a lot.

- time: "00:13:26"
  speaker: League
  caption: |
    First of all, "Do you want to descend into
    this directory" in the first place? Yes.

- time: "00:13:32"
  speaker: League
  caption: |
    "Do you want to descend into templates?"
    Yes. "Do you want to remove this

- time: "00:13:36"
  speaker: League
  caption: |
    file which is empty?" Okay. So this obviously slows
    you down if you type something by accident.

- time: "00:13:47"
  speaker: League
  caption: |
    But if you really seriously want to
    remove a bunch of stuff,

- time: "00:13:51"
  speaker: League
  index: "`^C` (interrupt)"
  caption: |
    one way to get around an alias is -- by
    the way to stop that I just hit

- time: "00:13:56"
  speaker: League
  caption: |
    control-C to cancel that command. Control-C wouldn't
    undo any deletes that have already happened,

- time: "00:14:03"
  speaker: League
  caption: |
    it just cancels it where it is in the process. So if I
    want to actually delete that whole directory,

- time: "00:14:13"
  speaker: League
  index: "`\\` (backslash)"
  cmd: |
    \rm -r proj1
  caption: |
    one way to bypass an alias is to put a
    backslash before the command.

- time: "00:14:19"
  speaker: League
  caption: |
    And now if I've got an `rm` as an alias,
    this will skip the alias and just

- time: "00:14:25"
  speaker: League
  caption: |
    go to the regular command. So that will now delete
    all of the `proj1` directory very fast.

- time: "00:14:34"
  speaker: League
  caption: |
    So it's a little bit of a trade off, right? If `rm`
    with interactive is asking too many questions,

- time: "00:14:41"
  speaker: League
  caption: |
    then what you're going to do when you really need
    to delete something is just type `\rm`.

- time: "00:14:46"
  speaker: League
  caption: |
    And actually I've acquired that habit
    personally, my own `.bashrc` has `rm`

- time: "00:14:53"
  speaker: League
  caption: |
    aliased to `rm -i` but I always --
    I never type just `rm`.

- time: "00:14:58"
  speaker: League
  caption: |
    It's just in my bones now, or in my fingers to type
    `\rm` whenever I want to delete something,

- time: "00:15:05"
  speaker: League
  caption: |
    so the alias doesn't really do me any good.

- time: "00:15:08"
  speaker: League
  index: "`rm -f` (force)"
  caption: |
    One of the other options of `rm` that can be
    especially dangerous is the `-f`.

- time: "00:15:13"
  speaker: League
  caption: |
    So we see here `-f` means force. Force
    basically means if there is

- time: "00:15:21"
  speaker: League
  caption: |
    something preventing deletion that can
    be resolved -- so for example,

- time: "00:15:28"
  speaker: League
  caption: |
    if I've set up a permission on a file so
    that I'm not allowed to write to it,

- time: "00:15:32"
  speaker: League
  caption: |
    to delete it -- it can try to actually modify the
    permissions in order to allow that again.

- time: "00:15:41"
  speaker: League
  caption: |
    And so if I'm allowed to change the
    permission to allow me to delete it

- time: "00:15:46"
  speaker: League
  caption: |
    then it will still delete it. So
    that's a pretty serious thing.

- time: "00:15:51"
  speaker: League
  caption: |
    When you combine recursive with forcing
    that really becomes quite dangerous

- time: "00:15:54"
  speaker: League
  caption: |
    and so `rm -rf` even in like, nerd culture is known
    to be like a very dangerous thing to do,

- time: "00:16:01"
  speaker: League
  caption: |
    and it actually gives me chills a
    little bit even to type it.

- time: "00:16:06"
  speaker: League
  caption: |
    And one thing you never ever want to do probably is --

- time: "00:16:10"
  speaker: League
  cmd: |
    r m -rf /
  caption: |
    I can't even type this -- I've got to separate the
    `rm` so it doesn't cause me real problems --

- time: "00:16:17"
  speaker: League
  caption: |
    is if you put a slash here, slash is a way to
    refer to the top level of your file system,

- time: "00:16:24"
  speaker: League
  caption: |
    the root directory. And so this means start
    at the top of my entire disk or

- time: "00:16:29"
  speaker: League
  caption: |
    even multiple disks and try to
    delete everything it can.

- time: "00:16:35"
  speaker: League
  caption: |
    So that's a pretty awful command and you
    should probably try never to type it.

- time: "00:16:41"
  speaker: Lopes
  caption: |
    Alright so today we covered a lot of
    file management using the copy,

- time: "00:16:45"
  speaker: Lopes
  caption: |
    the remove, the move, as well as the
    make and remove directories.

- time: "00:16:50"
  speaker: League
  caption: |
    So next time I think we're going to look
    at Image Magick which is a pretty

- time: "00:16:54"
  speaker: League
  caption: |
    exciting suite of command line tools
    for doing image processing.

- time: "00:16:59"
  speaker: League
  caption: |
    You can do things like convert images
    from one format to another.

- time: "00:17:03"
  speaker: League
  caption: |
    You can automate things like
    applying filters to images,

- time: "00:17:08"
  speaker: League
  caption: |
    shrinking and cropping them -- all sorts of
    things. So I think that's going

- time: "00:17:12"
  speaker: League
  caption: |
    to be a pretty exciting one because we're
    going to move beyond just the

- time: "00:17:15"
  speaker: League
  caption: |
    simple commands that do things you already know
    how to do on a maybe desktop file manager.

- time: "00:17:22"
  speaker: League
  caption: |
    And we're going to start to see some
    things that we can do on the command

- time: "00:17:25"
  speaker: League
  caption: |
    line that are pretty different. So see you then!

- time: "00:17:32"
  caption: |
    [Dark electronic beat]

- time: "00:17:40"
  caption: |
    [Captions by Christian Lopes and Christopher League]

- time: "00:18:00"
  caption: |
    [End]
