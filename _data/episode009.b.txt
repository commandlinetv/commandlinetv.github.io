0:01
[Rhythmic, dark electronic intro music]

:League

0:19
Welcome back to Command Line TV, this is episode 9.

0:23
Today we're going to talk about
redirection and command substitution.

0:27
Do you have any follow-up from last time?

:Lopes

0:30
Last time we did installing
programs and package management.

0:33
My one question is we used `apt-get
upgrade` and `apt-get update` --

0:39
can we run `apt-get upgrade` without running `update`
or will that cause any conflicting issues?

:League

0:44
You can run `upgrade` by itself -- normally you
would run `update` and then `upgrade` together.

0:51
It's fine to run `upgrade` by itself but
what it will do is only upgrade

0:56
packages that it already knows about. What's happening
is the 'apt' subsystem keeps a package cache.

1:05
So it knows the last time it did an
update, what were the versions of all

1:09
the packages that were available. And
`upgrade` will look at that package

1:14
cache and upgrade anything that can be
upgraded. But unless you `update`,

1:21
you're not getting the freshest stuff, you're just
getting the stuff from the previous `update`.

1:25
So it's fine to do that, it doesn't hurt anything --
you just might not be getting the very latest.

:Lopes

1:31
I guess the last question we have would be
in terms of uninstalling a package?

1:35
What's the proper way of doing that
so there are no conflicts?

:League

1:38
So when you want to uninstall something,
there are a couple of options.

1:41
The simplest is, if you do `apt-get`
and then the command `remove`.

1:48
And then you put the name of a
package, or multiple packages --

1:52
so maybe we want to remove `imagemagick`.
This will remove that package and

1:57
delete the files from the system.
However, it does leave behind the

2:03
configuration files for imagemagick.
So the thinking is that --

2:08
if you install it, and maybe you customized the
installation of this package in some way,

2:12
by editing some of the configuration files -- it
doesn't want to remove your customization,

2:19
because if you install it again later, then maybe
you want to keep the way it was customized.

2:25
So `remove` removes most of the stuff but
it leaves behind a little bit.

2:30
An alternative to that is `purge`. This
will remove the package as well as

2:35
all the configuration files, even if
you made changes to them.

2:39
So if you really want to be sure that
everything is gone, then `purge` works fine.

2:44
And then we saw there are cases
of dependencies, right.

2:49
Sometimes when you install a package, it
brings along some other packages

2:53
that it needs as dependencies. So just
uninstalling `imagemagick` doesn't

3:01
necessarily remove all those dependencies.
And there's another command you

3:05
can run called `autoremove`. You don't
need to put a package name here,

3:10
it's just that whenever you run
`autoremove`, it'll look for any packages

3:14
that are no longer required by other
packages that you've installed.

3:19
So if `imagemagick` needed some library that
nobody else needs, it can remove that.

3:24
If some other package does still need
that library, then it will keep it.

3:29
So it's very smart about managing these kinds of
shared dependencies and conflicts and so on.

3:35
One thing to be careful of -- since
you mentioned conflicts --

3:39
is the `upgrade` and `install` commands
support an option called `-f` or `--force`.

3:48
This is usually a bad idea. What it
means is that if there's --

3:54
it can help in a couple of ways,
but it can also be harmful.

3:59
If the package requires dependencies
that are not installed properly,

4:04
you can use `--force` to try and install it anyway, and
maybe it'll work or maybe it'll be terrible.

4:09
If a package is going to overwrite files that
another package has already installed,

4:16
that's a bad thing that normally 'apt' will try to
prevent. But `--force` will allow that to happen.

4:21
So once in a while, `--force` might be the
thing you need to solve some problem,

4:28
but usually it's just going to cause
problems, so try to avoid it if possible.

:Lopes

4:33
So today we're going to learn about
redirection, which utilizes the `>`,

4:37
the `<` and the `>>` symbols. What
are the purposes of these?

:League

4:42
Redirection is about controlling where the input
and output of different commands come from.

4:51
Every command that you run has basically three
streams that are associated with it --

4:57
three streams of data. They are standard input, the
standard output, and the standard error.

5:06
And so error is also an output stream, but
it's meant to be used for things

5:12
that are not part of the normal output,
but things that are error messages

5:15
or warnings or stuff like that.

5:20
The way it works is that when you
put together a pipeline --

5:23
so if I do `ls` help -- whoops,
can't have a space there --

5:31
and then pipe that into `less` -- what
I'm doing with this pipe is

5:37
connecting the output of one command to
the input of another command.

5:42
And then where standard error comes into
play is, if this `ls` command has

5:46
some warnings or error messages it wants to put out,

5:49
they do not get piped into `less` or into
whatever the rest of that pipeline is.

5:55
So we could try out some examples of that.
One command that generates both

6:01
standard output and standard
error very easily is `grep`.

6:05
So we did `grep` to search through files
before. I'm going to search for

6:10
`copyright` in all the files in the current directory.

6:16
We saw this before, that it will generate
some lines where this is the filename,

6:21
and then the content of that file which
contains our keyword out here.

6:27
But it also has these error
messages that come from `grep`,

6:30
so whenever it hits a directory -- I
didn't tell it to go into that

6:36
directory or to ignore directories, so it's
giving me a little error message there.

6:41
So that's the standard error that we're
seeing. Normally when you run `grep`,

6:47
the standard output and the standard error are
both just dumping content onto my terminal.

6:54
But I can redirect that in different ways.
So let's try redirect to a file.

7:00
I'm going to put a greater-than
(`>`) and then a filename.

7:04
So we'll -- let's call this `copymatches.txt`.

7:11
What this will do is run that
command, but the standard output --

7:16
instead of being attached to
another command like `less`,

7:19
it will take that standard output and write it to this
filename that I've given here, after the `>`.

7:24
And you can have a space here, or
not -- that doesn't matter.

7:30
So if I do that, what happens is all of
the legitimate output of that

7:34
`grep` got directed to that file, so I don't see it.

7:38
But I still see all of the error messages,
because the error messages were

7:41
going out on a separate output
stream called standard error.

7:47
And then if I want to redirect both output and error
to the same place, there's a way to do that.

7:55
It is using the ampersand (`&`) --
there's one way to do it with this

8:01
(`&>`) but I think it's a little more
complicated. If you put the ampersand

8:04
after the greater-than (`>&`) -- and in that
case, you don't want a space there.

8:12
This will write both of those -- let's say
`copyboth.txt` for that file name.

8:19
So now I don't see any output from that
command because both the standard

8:23
output and standard error went to the same file.

8:26
So let's take a look at those files. The
`copymatches.txt` contains just the matches that we saw,

8:32
and no error messages. And then
`copyboth.txt` contains the matches and also --

8:41
I think I saw one up here -- the error
messages where I have directories.

8:46
So that's redirecting the output.

:Lopes

8:51
So besides the `grep` command can redirection
be used with things such as `cat`?

:League

8:55
Yeah, `cat` is often used to just
directly put some data into a file.

9:00
You can use a text editor for that, but
this a really simple thing and we

9:04
can use it to illustrate some of the
other output redirection operators.

9:10
So if I run cat -- `cat` all by itself,
all it does is it copies its

9:18
standard input to its standard output. So if I type
`hello`, it says `hello` back, and so forth.

9:28
And then when I'm done, whenever you've
got a command that's waiting for

9:31
you to type something for its standard
input, when you're all done you can

9:34
type 'control-D' to say that's the end of the input.

9:38
So I'm going to hit 'control-D' and it takes
me back and I'm done running `cat`.

9:43
So what if I did `cat` but I redirect the output
somewhere. So we could call it `output1.txt`.

9:51
And this time I'll type `line1 test`,
`this is line 2`, control-D.

9:58
And now we didn't see it echo those lines
back to me because instead it

10:03
echoed them to the file that I specified. And
then if I look at the content of that file,

10:11
also with `cat`, then it shows me
those lines that got saved there.

10:17
And then I could open that with a text editor or
something and edit it further if it needs it.

10:23
Let's try that again -- if I `cat`
to the same output file --

10:30
and we'll do `line 3 hello`, `testing
line 4`, control-D to stop.

10:37
And now my output file just contains the latest stuff.
It actually overwrote the previous content.

10:46
So you have to be really careful with
this redirection operator.

10:51
It will -- if that file already exists --
it will overwrite what's there,

10:56
and so what's there gets lost.

10:59
An alternative to that is if I use the
double greater-than (`>>`).

11:03
This means to take the existing content of that
file and append to it -- add to the end.

11:10
So I was up to line 4 I think, or?

:Lopes

11:13
Line 4.

:League

11:15
Line 4, alright. So `this is line 5`,
`and now line 6`, and control-D.

11:23
And when I output the file now, it has 3
and 4 from the previous run but I

11:30
appended 5 and 6 to the end. So that's
one way that we can distinguish

11:36
between the single greater-than (`>`) to possibly
overwrite a file and start from the beginning,

11:43
or the double greater-than (`>>`) which
appends onto the end of the file.

:Lopes

11:48
So the double greater-than and the single
greater-than can both create new

11:52
files if they don't exist. What if you just
want to add a no-clobber option to it.

:League

11:57
If you want to make sure it doesn't
overwrite some file that already exists,

12:02
we can set an option in the shell to
make it a little safer --

12:05
just like we made those aliases for
`mv` and `cp` and so on,

12:10
to make sure they don't overwrite files. The
way to do that is a shell option,

12:19
which you set with `set -o` and the name
of that option is `noclobber`.

12:27
And so normally I would want to do that in
my `.bashrc` or somewhere like that,

12:33
so it can be saved and every time I start a
new shell I'll have that option set.

12:38
The way I did it right now, it'll only take place --

12:41
it'll only take effect for this particular session.

12:44
But now if I do `cat` into my
`output1.txt`, it will actually prevent me

12:52
from overwriting a file that already
exists. So that's kind of nice.

12:57
But if I do double greater-than (`>>`),
that would not overwrite a file

13:02
because that's going to append and that's okay.
So the `noclobber` doesn't prevent that.

13:10
So that's a simple option you might
want to put in your `.bashrc`,

13:13
to make sure that this overwrite doesn't happen.

13:18
Alright, so the final type of redirection
you might want to do is directing

13:23
standard input from a file. So you've got
a file and you want it to become

13:28
the input of another command. So for example
I just created this `output1.txt`,

13:35
and if I want that to become the
input of, let's say -- `grep`.

13:43
So if I `grep` for `line`, okay that's
the keyword I'm grepping for.

13:50
Now, `grep` and a lot of commands that
can work in multiple ways --

13:56
so I can just put the filename on my `grep`
command line and it will do that grep,

14:02
so it matched four of those lines but not the
last one, so that one got omitted.

14:09
But I can also specify it using a less-than (`<`)
operator which is redirecting from that file.

14:17
And it does the same thing. So I can think of
doing that with `grep` or `head` --

14:23
let's say I want to see only the
first two lines of this file.

14:26
And in both of these cases, I can either
use the redirection operator or not,

14:33
it doesn't really make a big difference.
But there are some commands where

14:37
you would have to specify it as a
redirection instead of --

14:41
because it just doesn't support reading
its files from the command line.

14:50
Now I can mix input and output redirection
on the same command line as well.

14:54
So if I've got a file `output1.txt` and I
want to, let's say `grep` for

15:01
`append` which I know matches one of
those lines. And then I can also

15:06
output the result of that into `output2.txt`.
So no output appears on the terminal,

15:13
but my `grep` ran -- it took its input from this
file and it dumped its output to that file.

15:19
So the output only contains that one line that
matched the keyword that I searched for.

:Lopes

15:25
So in one of our previous episodes, we ran
`cat` and then piped it into `less`.

15:30
A few commands ago now, you just ran
`less` and then the text file.

15:34
What's the difference between those two?

:League

15:36
Yeah, we normally were using `less` like I did
`--help` pipe `less` or something like that.

15:42
And so what `less` is doing is
giving me a page at a time,

15:45
but it's getting its content from the
pipe. So it's taking its standard

15:50
input and showing it to me a page at a time.
But just like I did up here with `head`,

15:57
`head` can take its standard input from a
redirection *or* it can use a file.

16:03
So I can do the same with `less`. If I want to
-- there must be a `README` here, yeah.

16:09
So if I want to see the contents
of this a page at a time,

16:14
I can specify it as a file like that, `less
README`, and it shows me a page at a time.

16:20
Or I can run `less` and redirect the contents
of `README` into it -- same thing.

16:29
*Or* -- [laughs] this gets even crazier --
you can run `cat` --

16:34
`cat of course will just dump out the content, but
then you can pipe it into `less` -- same thing.

16:41
*Or* you can redirect from the `README` file
into `cat` and then pipe it into `less`.

16:47
And these become useless at some point,
you're just adding some small

16:52
layers of complexity to it when really all
you want to do is `less README`.

16:57
But it just gives you a sense of the
flexibility. Sometimes these --

17:02
the way these commands work comes in handy
when you're building long pipelines.

17:07
And we've seen cases of doing like `grep` then `cut`
and `sort` then `grep` and stuff like that.

17:14
The very nature of these commands that
allows them to be plugged together

17:19
to build those big useful pipelines also allows them
to be plugged together in fairly useless ways.

:Lopes

17:26
So now we'll be moving on to command
substitution. The two main symbols it

17:30
uses are the back-tick and the
dollar parentheses symbol.

17:34
But first, what would command
substitution be used for?

:League

17:37
It's a way of combining two different
commands. And we've seen how to

17:43
combine two commands using a pipe, so
when you do `ls|head` or something,

17:49
you're taking the output of one command and
making it the input of another command.

17:56
What the back-quotes do -- or
command substitution -- is,

17:59
let's say I do `ls` -- this doesn't make any
sense, but -- let`s say I do that.

18:07
So I put one command in back-quotes and this is the --

18:13
it's not the normal apostrophe character,
it's the back-quote (```) that

18:17
appears usually underneath the tilde.
So tilde is the shifted one,

18:23
and without shift it's usually that.

18:26
So this takes the command in back-quotes
and executes it. It has some output.

18:31
And then it takes that output and it pastes it
in that position on the command line.

18:37
So it will then run `ls` where what appears out
here is the *output* of the previous command.

18:45
So let's try to come up with a better example of
that. I'll start with a `grep` command.

18:54
So when I do something like `grep
copyright *`, we know what that does --

18:59
it just finds matching lines. But
there's an option to `grep -l` which

19:03
means only show the filenames that match.
So if I do `grep -l copyright` I

19:12
still get these error messages about directories but
other than that it's just showing me filenames.

19:18
It doesn't show the text of that file where it
matched, but just the filename itself.

19:24
So then what I might want to do is take
those filenames and pass them to

19:28
another command to do something different with them.

19:31
For example, I might want to delete them,
or move them all to a different

19:35
folder or something like that.

19:37
Let's make a new folder, call it `stuff`.
And what I want to do is move --

19:45
what are the files you want to move?
Well, I want to move all the files

19:49
that match `copyright` out of `*` which is all
the files in the current directory.

19:56
And then where do you want to move them to? The
new directory I created, called `stuff`.

20:01
So there are two commands here: `mv` and
`grep`. The `grep` will run first,

20:07
and the output of `grep` -- the standard
output of `grep` is then pasted

20:11
into the command line at this point
where the quotes are now.

20:16
So that will get replaced by the output of `grep` and
then I can move all those files into `stuff`.

20:23
What I'm seeing here is just the
standard error of the `grep`, right.

20:28
So it's only the standard output that gets pasted in,

20:33
and then the standard error still
comes out on the terminal.

20:36
But what it did do is it moved all
of those files into `stuff`.

20:40
So if I look in that `stuff` directory I've
got a bunch of files in there --

20:43
every single one of those files is one that
had `copyright` appear within it.

20:49
And now the files that remain in the current
directory do not have `copyright` in them.

20:53
So if I do `grep copyright *` in the current
directory, I only get the error messages.

20:59
All the files that matched have been moved aside.

21:02
So that's a pretty good example of a
command -- whenever you've got a

21:06
command that might return a list of
files, then you can use that as --

21:13
with the back quotes, with the command substitution --

21:17
as parameters for things like `mv` and
`rm` and `cp` and other commands

21:22
that expect filenames on their command line.

:Lopes

21:25
Now does command substitution only work on text
files, or can we use it for images as well?

:League

21:30
Oh we can use it for lots of things. So a pretty neat
way that we could use it for images is like --

21:38
to select some image files according to some criteria,

21:41
and then apply maybe a `mogrify` to crop or
shrink those images or something like that.

21:49
So let's go look at the -- I think
that was in `Downloads/pics` --

21:54
these are the images I was working with
in our episode on ImageMagick.

22:00
And so if I do `identify` on all of these
images, I get a line for each

22:07
image that tells me the resolution and so
forth. And to keep this relatively simple,

22:12
let's just say that I `grep` and I'm going to
look for images that have a width of 3264,

22:21
so it'll have like the `3264` and then an `x`.
That's a subset of the images, right?

22:31
Most of them are by 1952, but this one
actually is a little different.

22:35
But now I've been able to use `identify` and `grep`
to select a particular set of image files.

22:42
And then I want to strip this down so that
it's just the filename that I'm seeing,

22:48
not the rest of this information. So I'm
going to use `cut` and what I'm

22:55
going to pretend is the delimiter here is
this left bracket symbol (`[`), right?

23:00
So if that's the delimiter then the first
field would be the filename and

23:05
the second field would be all the rest of this. So
I can say the delimiter is left bracket,

23:10
and I want field 1. And now I just
have a list of filenames.

23:14
So that's a perfect type of command that
I could put in my substitution.

23:21
And when commands get a little more complex like this,

23:24
and especially when you use nested substitution,
these back-quotes don't always behave very well.

23:29
They can't be nested within each
other the way parentheses can.

23:35
So what I'm going to do is use this
alternative syntax for command substitution,

23:42
which is dollar and then parentheses `$()`
around the part that gets substituted.

23:50
Reminder that this outputs a list of
filenames. So if I put it in

23:56
back-quotes it's going to expand
to that list of filenames.

24:00
And then I can use that within
another command like `mogrify`.

24:05
And let's say I want to shrink these by -- I
don't know, 10% or something like that.

24:14
So first we're going to use this
pipeline to select the files,

24:19
and then we're going to apply
`mogrify` to all of them.

24:22
That can take a moment because I'm shrinking a
bunch of files, but it came out pretty fast.

24:27
If I list these files in reverse
order by modification time,

24:34
then I see that all of the ones that
appeared in this list are at the end.

24:39
So starting with `201`, `202`, `207` -- these
files were the most recently modified.

24:45
And if I look at some of them -- let's
just take 201, 2, and 7 `.jpg` --

24:53
do you remember this bracket
wildcard? So this will substitute --

24:58
another way to do this is a question mark. The
question mark just substitutes a single character,

25:04
so that's going to match all the
images that have `020`-something.

25:10
But I want to only select ones that end with
1,2,7,9 because they were in my initial list.

25:17
So I'm going to look at those files that I just
shrunk -- at least the first four of them.

25:22
And you can see that they're very tiny images
now -- only 10% of what they were.

25:29
And the way I selected those was using
the `$()` and this sub-command.

:Lopes

25:38
Well today we covered the basics on redirection
using the `>`, `<`, and `>>` symbols.

25:45
We also touched on command substitution using the
back-tick as well as the dollar-parentheses sign.

:League

25:53
So thanks for joining us today and
we'll see you next time.

25:58
[Dark electronic beat]

26:08
[Captions by Christopher League]

26:26
[End]
