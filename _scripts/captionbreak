#!/usr/bin/env ruby

# This script takes paragraphs of text and partitions and reformats them into
# captions of at most two short lines each. Any paragraph break (blank line)
# forces a caption break. Other breaks are inserted as needed, preferably on
# punctuation, preferring periods (.?!) and then others (-;,:).
#
# I recommend including speaker names whenever the speaker changes. Do this as
# a paragraph by itself, prefixed by a colon:
#
#    :League
#
#    Welcome to Command Line TV. In this episode, we will do something.
#
# Use `backquotes` to signal that the enclosed is a literal command or filename
# that should appear in a designated style in the transcript. Use a double-dash
# -- to indicate a pause or an interruption.
#

maxLine = 54
minCaption = 50
maxCaption = 100
midPoint = (maxCaption - minCaption) / 2
captions = []

ARGF.read.split(/\s*?\n\s*\n\s*/).each do |para|
  para.gsub!(/\s*\n\s*/, " ")
  while para.length > maxCaption
    # Must split; look for last period in range
    frag = para[minCaption..maxCaption]
    lastDot = frag.rindex(/[\!\?\.]\s+/)
    if lastDot
      i = minCaption + lastDot
      captions << para[0..i]
      para = para[i+1..-1].lstrip
    else
      # No period; look for other puncts near center
      punct = frag.rindex(/[-;,:]\s+/, midPoint) ||
              frag.index(/[-;,:]\s+/, midPoint)
      if punct
        i = minCaption + punct
        captions << para[0..i]
        para = para[i+1..-1].lstrip
      else
        # No puncts, just use a word break near center
        br = frag.rindex(/\s+/, midPoint) || frag.index(/\s+/, midPoint)
        i = minCaption + br
        captions << para[0..i]
        para = para[i+1..-1].lstrip
      end
    end
  end
  if para.length > 0
    captions << para
  end
end

# Now line-break captions if needed
captions.each do |capt|
  if capt.length > maxLine
    mid = capt.length / 2
    br = capt.rindex(/\s+/, mid+5) || capt.index(/s+/, mid)
    puts capt[0..br]
    puts capt[br+1..-1].lstrip
  else
    puts capt
  end
  puts
end
